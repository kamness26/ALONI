import os, time
from datetime import datetime, timedelta
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeout

COREPOWER_URL = "https://www.corepoweryoga.com/"
EMAIL = os.getenv("COREPOWER_EMAIL")
PASSWORD = os.getenv("COREPOWER_PASSWORD")
TARGET_CLASS = "6:15 pm"
TARGET_LOCATION = "Flatiron"

def main():
    target_date = datetime.now() + timedelta(days=13)
    weekday = target_date.strftime("%A")
    if weekday not in ["Monday", "Tuesday", "Wednesday"]:
        print(f"‚è∏  {target_date:%A %b %d} not a booking day.")
        return

    print(f"üöÄ  Starting ALONI 2.9.13 ‚Äì Full Login ‚Üí Scroll ‚Üí Book Flow")
    print(f"üìÖ  Target date: {weekday}, {target_date:%b %d}")

    with sync_playwright() as p:
        headless = os.getenv("CI", "").lower() == "true"
        browser = p.chromium.launch(headless=headless)
        context = browser.new_context()
        page = context.new_page()

        # ‚Äî HOME ‚Äî
        print("üè†  Opening homepage‚Ä¶")
        page.goto(COREPOWER_URL, timeout=60000)

        # Close pop-ups
        for sel in [
            "button:has-text('Close')",
            "button[aria-label*='close' i]",
            "div[role='dialog'] button:has-text('√ó')",
        ]:
            try:
                page.locator(sel).first.click(timeout=3000)
                print(f"üí®  Closed popup via {sel}")
            except Exception:
                pass

        # ‚Äî PROFILE ICON ‚Üí SIGN IN ‚Äî
        try:
            profile_icon = page.locator("img[alt='Profile Icon']").first
            profile_icon.wait_for(state="visible", timeout=10000)
            page.evaluate("(el)=>el.click()", profile_icon.element_handle())
            print("‚úÖ  Clicked Profile Icon.")
        except Exception as e:
            print(f"‚ö†Ô∏è Profile icon click failed: {e}")

        try:
            sign_in = page.locator("button[data-position='profile.1-sign-in']").first
            sign_in.wait_for(state="visible", timeout=8000)
            sign_in.click()
            print("‚úÖ Clicked Sign In button.")
        except Exception as e:
            print(f"‚ö†Ô∏è Sign In button not visible: {e}")

        # ‚Äî LOGIN FORM ‚Äî
        try:
            page.fill("input[name='username'], input[name='email']", EMAIL)
            page.fill("input[name='password']", PASSWORD)
            page.keyboard.press("Enter")
            print("‚úÖ Submitted credentials.")
        except Exception as e:
            print(f"‚ö†Ô∏è Credential entry failed: {e}")

        page.wait_for_timeout(5000)

        # ‚Äî POST-LOGIN POPUPS ‚Äî
        for sel in [
            "button:has-text('Close')",
            "button[aria-label*='close' i]",
            "div[role='dialog'] button:has-text('√ó')",
        ]:
            try:
                page.locator(sel).first.click(timeout=3000)
                print(f"üí® Closed post-login popup via {sel}")
            except Exception:
                pass

        # ‚Äî BOOK A CLASS ‚Äî
        try:
            book_btn = page.locator("button[data-position='book-a-class']").last
            book_btn.wait_for(state="visible", timeout=10000)
            book_btn.click()
            print("‚úÖ Clicked 'Book a class'.")
        except Exception as e:
            print(f"‚ö†Ô∏è Could not click Book a class: {e}")

        page.wait_for_timeout(4000)

        # ‚Äî SELECT DATE (top-left calendar) ‚Äî
        day_num = str(target_date.day)
        try:
            cal = page.locator(f"div.cal-date:has-text('{day_num}')").last
            cal.scroll_into_view_if_needed()
            cal.click()
            print(f"‚úÖ Clicked calendar date {day_num} ({weekday}).")
        except Exception as e:
            print(f"‚ö†Ô∏è Calendar click failed: {e}")

        # ‚Äî SCROLL AND BOOK CLASS ‚Äî
        print("üîç Searching for target class‚Ä¶")
        target = None
        for _ in range(20):
            rows = page.locator("div.session-row-view")
            for i in range(rows.count()):
                try:
                    txt = rows.nth(i).inner_text(timeout=2000)
                    if TARGET_CLASS in txt and TARGET_LOCATION in txt:
                        target = rows.nth(i)
                        break
                except Exception:
                    continue
            if target:
                break
            page.mouse.wheel(0, 1000)
            time.sleep(0.4)

        if target:
            target.scroll_into_view_if_needed()
            btn = target.locator("div.btn-text:has-text('BOOK')").last
            try:
                btn.click(timeout=5000)
                print(f"‚úÖ Booked {TARGET_CLASS} at {TARGET_LOCATION}.")
            except Exception as e:
                print(f"‚ö†Ô∏è BOOK button click failed: {e}")
        else:
            print(f"‚ö†Ô∏è No {TARGET_CLASS} at {TARGET_LOCATION} found.")

        print("üèÅ Flow complete.")
        context.close()
        browser.close()


if __name__ == "__main__":
    main()
